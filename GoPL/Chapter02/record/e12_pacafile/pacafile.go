// 1. Golang 中包的作用和其他语言中的库或模块作用类似，用于支持模块
// 化、封装、编译隔离和重用。
// 2. 一个包的源代码保存在一个或多个以 .go 结尾的文件中，它所在目录
// 名的尾部就是包的导入路径，例如，gopl.io/ch1/helloworld 包的文件存
// 储在目录 $GOPATH/src/gopl.io/ch1/helloworld 中。
// 3. 每一个包给它的声明提供独立的命名空间:
// 在 image 包中，Decode 标识符和 unicode/utf16 包中的标识符一样，但
// 是关联了不同的函数。为了从包外部引用一个函数，我们必须对标识符进
// 行限定(修饰)，以明确表示所指的是 image.Decode 还是 utf16.Decode。
// 4. 包让我们可以通过控制变量在包外面的可见性或导出情况来隐藏信息。
// Golang通过一条简单的规则来管理标识符是否对外可见: 导出的标识符以
// 大写字母开头。
// 5. package 声明前面紧挨着的文档注释对整个包进行描述。习惯上应该
// 在开头用一句话对包进行总结性的描述。每一个包里只有一个文件应该包
// 含该包的文档注释。扩展的文档注释通常放在一个文件中，按惯例名字叫
// 作 doc.go。
/*
>>> File Link:
../../demo/tempconv/tempconv.go
../../demo/tempconv/conv.go
*/
package main
