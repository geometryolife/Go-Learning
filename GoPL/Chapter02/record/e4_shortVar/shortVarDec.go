// 1. 在函数中常常使用短变量声明(短小、灵活)来声明和初始化局部变量:
// name := expression
// i := 100 // 一个int类型的变量
// 2. var声明通常是为那些跟初始化表达式类型不一致的局部变量保留的:
// var boiling float64 = 100 // 一个float64类型的变量
// 3. 多个变量可以以短变量声明的方式声明和初始化:
// i, j := 0, 1
// 4. :=表示声明，=表示赋值，注意，: 一个变量的声明不能和多重赋值搞混
// 5. 多重赋值特性简化了变量交换的语法:
// i, j = j, i // 交换i和j的值
// 6. 与var声明类似，短变量声明也可以调用返回多个值的函数
// 来进行声明和初始化。
// 7. 注意: 短变量声明不需要声明所有在左边的变量，如果一些变量在同一
// 个词法快中声明，那么对于那些变量，短变量声明的行为等同于赋值:
// in, err := os.Open(infile)
// out, err := os.Create(outfile)
// 8. 编译无法通过, 使用普通的赋值语句修复:
// f, err := os.Open(infile)
// f, err := os.Create(outfile) // 编译错误: 没有新的变量
// 9. 注意: 只有在同一个词法块中已经存在变量的情况下，短声明的行为
// 才和赋值操作一样，外层的声明将被忽略。
package main
